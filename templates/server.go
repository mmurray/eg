package templates

import (
	"bytes"
	"compress/gzip"
	"io"
)

// Server returns the raw, uncompressed file data data.
func Server() []byte {
	gz, err := gzip.NewReader(bytes.NewBuffer([]byte{
0x1f,0x8b,0x08,0x00,0x00,0x09,0x6e,0x88,0x00,0xff,0x6c,0x8f,
0xc1,0x4e,0xc5,0x20,0x10,0x45,0xd7,0xe5,0x2b,0x26,0x75,0x43,
0x13,0x03,0x5f,0xe0,0xc2,0xb8,0x7f,0x26,0xd5,0x1f,0x40,0x32,
0xed,0x23,0x96,0x42,0x86,0xe1,0x19,0x25,0xfc,0xbb,0xa0,0x46,
0x9b,0x17,0xb7,0xf7,0xc2,0x3d,0x67,0xa2,0xb1,0xaf,0x66,0x45,
0xf0,0xc6,0xed,0x42,0x38,0x1f,0x03,0x31,0x48,0x31,0x8c,0xab,
0xe3,0x73,0x7e,0x51,0x36,0x78,0xed,0x33,0x7d,0x68,0x5c,0xc3,
0xf8,0x7f,0xac,0xcf,0xcc,0xb1,0x77,0xa5,0xc0,0xc9,0x78,0x84,
0x5a,0xb5,0x89,0x51,0xdb,0xb0,0x33,0x85,0x6d,0x43,0x4a,0x57,
0x6d,0x6b,0x96,0x1e,0x11,0x2e,0x1b,0x5a,0x1e,0xc5,0x24,0xc4,
0x92,0x77,0xfb,0x65,0x21,0x27,0x28,0x62,0x28,0xe5,0xe6,0xde,
0xb2,0x0b,0x7b,0xaa,0x55,0x0c,0x9d,0xa0,0x66,0x5c,0x5d,0x62,
0xa4,0xef,0x5c,0xf6,0xc1,0x87,0x5f,0x44,0x9b,0x55,0x7f,0x84,
0xf1,0x16,0x7e,0xb6,0xd5,0xf3,0x7b,0xc4,0xc7,0x45,0x1e,0x64,
0xd4,0xf5,0xc7,0x52,0xa7,0xa9,0x13,0xf5,0x81,0xd8,0x15,0xd5,
0x1c,0x32,0x63,0x92,0xad,0xbc,0x18,0x82,0x04,0x77,0xd0,0xce,
0x55,0x27,0x7c,0x7b,0x42,0xba,0x20,0xc9,0xc3,0x4d,0x63,0x7b,
0x94,0xd4,0x9c,0x9b,0xbe,0xa8,0x9f,0x01,0x00,0x00,0xff,0xff,
0x9b,0xc8,0x2d,0x61,0x55,0x01,0x00,0x00,
	}))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	var b bytes.Buffer
	io.Copy(&b, gz)
	gz.Close()

	return b.Bytes()
}